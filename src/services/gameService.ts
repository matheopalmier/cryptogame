import * as SecureStore from 'expo-secure-store';
import { User, PortfolioItem, Transaction, LeaderboardEntry } from '../types';
import { getCurrentUser } from './authService';
import { ENDPOINTS } from '../config/api';
import { get, post } from './apiService';
import mockData from './mockData';

const USER_DATA_KEY = 'user_data';
const TRANSACTIONS_KEY = 'transactions';
const LEADERBOARD_KEY = 'leaderboard';

// Acheter une cryptomonnaie
export const buyCrypto = async (
  cryptoId: string,
  cryptoName: string,
  amount: number,
  price: number
): Promise<User> => {
  try {
    console.log('üí∞ Tentative d\'achat de cryptomonnaie via l\'API:', { cryptoId, amount, price });
    
    // Appeler l'API pour effectuer l'achat
    const response = await post(ENDPOINTS.BUY_CRYPTO, {
      cryptoId,
      cryptoName,
      amount,
      price
    });
    
    console.log('üí∞ R√©ponse de l\'API apr√®s achat:', response);
    
    // Si la transaction est r√©ussie, mettre √† jour les donn√©es utilisateur locales
    if (response && response.success) {
      // R√©cup√©rer les derni√®res donn√©es utilisateur depuis le serveur
      const updatedUser = await getCurrentUser();
      console.log('üí∞ Utilisateur mis √† jour apr√®s achat:', updatedUser);
      
      if (updatedUser) {
        // Sauvegarder les nouvelles donn√©es localement
        await SecureStore.setItemAsync(USER_DATA_KEY, JSON.stringify(updatedUser));
        return updatedUser;
      }
    }
    
    throw new Error(response?.message || 'Erreur lors de l\'achat');
  } catch (error) {
    console.error('üí∞ Erreur lors de l\'achat de cryptomonnaie:', error);
    throw error;
  }
};

// Vendre une cryptomonnaie
export const sellCrypto = async (
  cryptoId: string,
  amount: number,
  price: number
): Promise<User> => {
  try {
    console.log('üí∞ Tentative de vente de cryptomonnaie via l\'API:', { cryptoId, amount, price });
    
    // Appeler l'API pour effectuer la vente
    const response = await post(ENDPOINTS.SELL_CRYPTO, {
      cryptoId,
      amount,
      price
    });
    
    console.log('üí∞ R√©ponse de l\'API apr√®s vente:', response);
    
    // Si la transaction est r√©ussie, mettre √† jour les donn√©es utilisateur locales
    if (response && response.success) {
      // R√©cup√©rer les derni√®res donn√©es utilisateur depuis le serveur
      const updatedUser = await getCurrentUser();
      console.log('üí∞ Utilisateur mis √† jour apr√®s vente:', updatedUser);
      
      if (updatedUser) {
        // Sauvegarder les nouvelles donn√©es localement
        await SecureStore.setItemAsync(USER_DATA_KEY, JSON.stringify(updatedUser));
        return updatedUser;
      }
    }
    
    throw new Error(response?.message || 'Erreur lors de la vente');
  } catch (error) {
    console.error('üí∞ Erreur lors de la vente de cryptomonnaie:', error);
    throw error;
  }
};

// Obtenir l'historique des transactions
export const getTransactionHistory = async (): Promise<Transaction[]> => {
  const user = await getCurrentUser();
  if (!user) {
    throw new Error('User not logged in');
  }

  const transactionsJson = await SecureStore.getItemAsync(TRANSACTIONS_KEY);
  const transactions: Transaction[] = transactionsJson 
    ? JSON.parse(transactionsJson) 
    : [];
  
  // Filtrer pour n'obtenir que les transactions de l'utilisateur connect√©
  return transactions.filter(tx => tx.userId === user.id);
};

/**
 * R√©cup√©rer le classement des utilisateurs
 */
export const getLeaderboard = async (): Promise<LeaderboardEntry[]> => {
  try {
    console.log('üìä R√©cup√©ration du classement des utilisateurs...');
    // Essayer d'abord d'obtenir les donn√©es du serveur r√©el
    const response = await get(ENDPOINTS.LEADERBOARD);
    
    // Si la r√©ponse a un format API (avec success et data)
    if (response && response.success && response.data) {
      console.log('üìä Donn√©es de classement re√ßues du serveur:', response.data.length > 0 ? {
        "Premier utilisateur": {
          userId: response.data[0].userId,
          username: response.data[0].username,
          balance: response.data[0].balance,
          portfolioValue: response.data[0].portfolioValue,
          totalValue: response.data[0].totalValue
        }
      } : 'Aucun utilisateur dans le classement');
      
      return response.data.map((entry: any) => {
        // S'assurer que portfolioValue et totalValue sont d√©finis correctement
        const portfolioValue = typeof entry.portfolioValue === 'number' ? entry.portfolioValue : 0;
        const totalValue = typeof entry.totalValue === 'number' ? 
          entry.totalValue : 
          (entry.balance + portfolioValue);
          
        console.log(`üìä Utilisateur ${entry.username}: Balance=${entry.balance}, PortfolioValue=${portfolioValue}, TotalValue=${totalValue}`);
        
        return {
          userId: entry.userId,
          username: entry.username,
          avatar: entry.avatar,
          balance: entry.balance,
          portfolioValue: portfolioValue,
          totalValue: totalValue,
          profitPercentage: entry.profitPercentage || 0
        };
      });
    }
    
    // Sinon, si la r√©ponse est directement un tableau
    if (Array.isArray(response)) {
      console.log('üìä Donn√©es de classement re√ßues directement du serveur:', 
        response.length > 0 ? {
          username: response[0].username,
          balance: response[0].balance,
          portfolioValue: response[0].portfolioValue,
          totalValue: response[0].totalValue
        } : 'Aucun utilisateur dans le classement');
      
      return response.map(entry => {
        const portfolioValue = typeof entry.portfolioValue === 'number' ? entry.portfolioValue : 0;
        const totalValue = typeof entry.totalValue === 'number' ? 
          entry.totalValue : 
          (entry.balance + portfolioValue);
        
        return {
          ...entry,
          portfolioValue: portfolioValue,
          totalValue: totalValue
        };
      });
    }
    
    // Fallback sur les donn√©es mock√©es si le format n'est pas reconnu
    console.log('‚ö†Ô∏è Format de r√©ponse non reconnu, utilisation des donn√©es mock√©es');
    const mockLeaderboard = mockData.leaderboard.map(entry => ({
      ...entry,
      portfolioValue: 0, // Les donn√©es mock√©es n'ont pas de portfolioValue
      totalValue: entry.balance // Pour les donn√©es mock√©es, totalValue = balance
    }));
    return mockLeaderboard;
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du classement:', error);
    console.log('‚ö†Ô∏è Fallback sur les donn√©es mock√©es apr√®s erreur');
    const mockLeaderboard = mockData.leaderboard.map(entry => ({
      ...entry,
      portfolioValue: 0,
      totalValue: entry.balance
    }));
    return mockLeaderboard;
  }
};

/**
 * R√©cup√©rer le portefeuille de l'utilisateur actuel avec les valeurs √† jour
 */
export const getUserPortfolio = async (): Promise<User | null> => {
  try {
    console.log('üìä R√©cup√©ration du portefeuille utilisateur...');
    const response = await get(ENDPOINTS.PORTFOLIO);
    
    if (response && response.success && response.data) {
      console.log('üìä Donn√©es du portefeuille re√ßues:', {
        balance: response.data.balance,
        portfolioCount: response.data.portfolio?.length || 0,
        totalValue: response.data.totalValue
      });
      
      // R√©cup√©rer l'utilisateur actuel
      const currentUser = await getCurrentUser();
      if (!currentUser) {
        console.error('‚ùå Utilisateur non connect√©');
        return null;
      }
      
      // Mettre √† jour les donn√©es utilisateur avec les derni√®res informations
      const updatedUser = {
        ...currentUser,
        balance: response.data.balance,
        portfolio: response.data.portfolio || [],
        totalValue: response.data.totalValue,
        portfolioValue: response.data.portfolioValue,
        profitPercentage: response.data.profitPercentage,
        rank: response.data.rank
      };
      
      // Sauvegarder les nouvelles donn√©es localement
      await SecureStore.setItemAsync(USER_DATA_KEY, JSON.stringify(updatedUser));
      return updatedUser;
    }
    
    // Si le format de r√©ponse n'est pas celui attendu, utiliser les donn√©es utilisateur actuelles
    console.warn('‚ö†Ô∏è Format de r√©ponse non reconnu, utilisation des donn√©es utilisateur actuelles');
    return await getCurrentUser();
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du portefeuille:', error);
    // En cas d'√©chec, retourner les donn√©es utilisateur actuelles
    return await getCurrentUser();
  }
}; 